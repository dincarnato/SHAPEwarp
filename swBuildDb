#!/usr/bin/env perl

use strict;
use File::Basename;
use File::Path qw(mkpath);
use FindBin qw($Bin);
use Getopt::Long qw(:config no_ignore_case);
use threads;
use threads::shared;

use lib $Bin . "/lib";

use Data::IO;
use Data::Sequence::Utils;
use Core::Mathematics qw(:all);
use Core::Utils;
use RF::Data::IO::XML;
use SW::DB;
use SW::DB::Entry;
use SW::Utils;
use Term::Progress;

$|++;

my ($help, $output, $overwrite, $nShufflings,
    $blockSize, $error, $dbIO, $tmpIO, $tmpIO2,
    $inBlockShuffle, $chunkSize, $threads,
    $slope, $intercept, $maxBPspan, $foldWin,
    $foldOffset, $winTrim, $noLonelyPairs, $noClosingGU,
    $temperature, $foldDb, @inputXml,
    @xmlFiles, @pool);

my $progressBar : shared;
my @offset : shared;
my @fileQueue : shared;

do {

    local $SIG{__WARN__} = sub { };

    GetOptions( "h|help"         => \$help,
                "o|output=s"     => \$output,
                "ow|overwrite"   => \$overwrite,
                "threads=s"      => \$threads,
                "blockSize=s"    => \$blockSize,
                "inBlockShuffle" => \$inBlockShuffle,
                "chunkSize=s"    => \$chunkSize,
                "shufflings=s"   => \$nShufflings,
                "foldDb"         => \$foldDb,
                "maxBPspan=s"    => \$maxBPspan,
                "noLonelyPairs"  => \$noLonelyPairs,
                "noClosingGU"    => \$noClosingGU,
                "slope=s"        => \$slope,
                "intercept=s"    => \$intercept,
                "temperature=s"  => \$temperature,
                "winSize=s"      => \$foldWin,
                "offset=s"       => \$foldOffset,
                "winTrim=s"      => \$winTrim ) or help(1);

    @inputXml = @ARGV;

};

help() if ($help);

$output ||= "sw_db/";
$threads ||= 1;
$blockSize ||= 10;
$chunkSize ||= 1000;
$nShufflings ||= 100;
$slope //= 1.8;
$intercept //= -0.6;
$maxBPspan ||= 600;
$foldWin ||= 800;
$foldOffset ||= 200;
$temperature //= 37;
$winTrim //= 50;
$output =~ s/\/?$/\//;
@offset = (0, 0);

die "\n[!] Error: No input XML folder provided\n\n" if (!@inputXml);
for (@inputXml) { die "\n[!] Error: Specified path \"" . $_ . "\" does not point to a directory\n\n" if (!-d $_); }
die "\n[!] Error: Number of threads must be a positive INT > 0\n\n" if (!isint($threads));
die "\n[!] Error: Block size must be a positive INT > 0\n\n" if (!isint($blockSize) || $blockSize <= 0);
die "\n[!] Error: Chunk size must be a positive INT >= 100\n\n" if (!isint($chunkSize) || $chunkSize < 100);
die "\n[!] Error: Slope must be numeric\n\n" if (!isnumeric($slope));
die "\n[!] Error: Intercept must be numeric\n\n" if (!isnumeric($intercept));
die "\n[!] Error: Maximum base-pair span must be a positive INT >= 3\n\n" if (!ispositive($maxBPspan) || $maxBPspan < 3);
die "\n[!] Error: Temperature must be numeric\n\n" if (!isnumeric($temperature));
die "\n[!] Error: Folding window size must be an INT >= 50\n\n" if (!isint($foldWin) || $foldWin < 50);
die "\n[!] Error: Folding window sliding offset must be a positive INT comprised between 0 and winSize\n\n" if (!isint($foldOffset) || $foldOffset > $foldWin);
die "\n[!] Error: Window trimming must be a positive INT comprised between 0 and half the difference of winSize - offset\n\n" if (!isint($winTrim) || $winTrim > int(($foldWin - $foldOffset) / 2));

print "\n";

if (-e $output) {

    if ($overwrite) {

        my $error = rmtree($output);

        die "[!] Error: " . $error . "\n\n" if ($error);

    }
    else { die "[!] Error: Output directory already exists." .
               "\n           Please use -ow (or --overwrite) to overwrite output directory\n\n"; }

}

mkpath($output, { mode  => 0755,
                  error => \$error });

die "[!] Error: Unable to create output directory (" . $error->[0]->{each(%{$error->[0]})} . ")\n\n" if (@{$error});

$tmpIO = Data::IO->new( file      => $output . "tmp.reactivity.db",
                        overwrite => 1,
                        mode      => "w" );

foreach my $xmlFolder (@inputXml) {

    opendir(my $dh, $xmlFolder);
    while(my $file = readdir($dh)) {

        next if ($file !~ m/\.xml$/);

        push(@xmlFiles, $xmlFolder . "/" . $file);

    }
    closedir($dh);

}

@fileQueue = @xmlFiles;
$progressBar = shareDataStruct(Term::Progress->new( max   => scalar(@xmlFiles),
                                                    width => 50 ));
$progressBar->init("Building database");

@pool = map { threads->create(\&writeTmpEntry) } 1 .. $threads;
$_->join() for @pool;

$tmpIO->close();
$tmpIO = Data::IO->new( file      => $output . "tmp.reactivity.shuffled.db",
                        overwrite => 1,
                        mode      => "w" );
$tmpIO2 = Data::IO->new( file => $output . "tmp.reactivity.db");

print "\n";

$progressBar->max(scalar(@xmlFiles) * $nShufflings);
$progressBar->reset();
$progressBar->init("Building shuffled database");

@pool = map { threads->create(\&writeTmpShuffledEntry) } 1 .. $threads;
$_->join() for @pool;

$tmpIO->close();
$tmpIO2->close();
$progressBar->complete();

print "\n";

@fileQueue = qw(reactivity.db reactivity.shuffled.db);
$progressBar->max(2);
$progressBar->reset();
$progressBar->init("Finalizing DB");

@pool = map { threads->create(\&writeDb) } 1 .. $threads;
$_->join() for @pool;

print "\n\n";

sub writeTmpEntry {

    $tmpIO->flush(1);

    while (1) {

        my ($file, $eval, $xml, $id,
            $entry);

        { lock(@fileQueue);
          $file = shift(@fileQueue) if (@fileQueue); }

        last unless(defined $file);

        $eval = do { local $@;
                     eval { $xml = RF::Data::IO::XML->new(file => $file); };
                     $@; };

        if (!$eval) {

            my (@data);
            $id = $file;
            $id = (fileparse($file, qr/\.[^.]*/))[0] if (@inputXml == 1);
            $id =~ s/\//_/g;
            @data = $foldDb ? unpairedProbs($xml->sequence(), [ $xml->reactivity() ], { maxBPspan     => $maxBPspan,
                                                                                        noLonelyPairs => $noLonelyPairs,
                                                                                        noClosingGU   => $noClosingGU,
                                                                                        slope         => $slope,
                                                                                        intercept     => $intercept,
                                                                                        temperature   => $temperature,
                                                                                        winSize       => $foldWin,
                                                                                        offset        => $foldOffset,
                                                                                        winTrim       => $winTrim }) : $xml->reactivity();
            $entry = $id . "\n" . $xml->sequence() . "\n" . join(",", @data) . "\n";

            { lock($progressBar);
              $tmpIO->goToEof(); # Brings filehandle to end of file
              $tmpIO->write($entry);
              $progressBar->update(1); }

        }

    }

    $tmpIO->close();

}

sub writeTmpShuffledEntry {

    $tmpIO->flush(1);

    while (1) {

        my ($id, $sequence, $reactivity, $entry,
            @shuffled, @reactivity);

        { lock(@offset);

          last if (!@offset);

          $tmpIO2->seek($offset[0]);
          $id = $tmpIO2->read();
          $sequence = $tmpIO2->read();
          $reactivity = $tmpIO2->read();
          $offset[1]++;

          if ($offset[1] >= $nShufflings) {

              if ($tmpIO2->eof()) {

                  undef(@offset);

                  last;

              }

              $offset[0] = $tmpIO2->tell();
              $offset[1] = 0;

          } }

        last if (!defined $id || !defined $sequence || !defined $reactivity);

        @reactivity = split(",", $reactivity);
        @shuffled = blockShuffle( data           => \@reactivity,
                                  sequence       => $sequence,
                                  blockSize      => $blockSize,
                                  chunkSize      => $chunkSize,
                                  inBlockShuffle => $inBlockShuffle );
        $entry = $id . "_" . randalphanum(0x16) . "\n" . $shuffled[1] . "\n" . join(",", @{$shuffled[0]}) . "\n";

        { lock($progressBar);
          $tmpIO->goToEof(); # Brings filehandle to end of file
          $tmpIO->write($entry);
          $progressBar->update(1); }

    }

    $tmpIO->close();

}

sub writeDb {

    while (1) {

        my ($file, $dbIO);

        { lock(@fileQueue);
          $file = shift(@fileQueue) if (@fileQueue); }

        last unless(defined $file);

        $dbIO = SW::DB->new( file       => $output . $file,
                             overwrite  => 1,
                             mode       => "w",
                             buildIndex => 1,
                             index      => $output . $file . "i" );

        my $tmpIO = Data::IO->new(file => $output . "tmp." . $file);
        while(!$tmpIO->eof()) {

            my ($id, $sequence, $reactivity, $entry);
            $id = $tmpIO->read();
            $sequence = $tmpIO->read();
            $reactivity = [ split(",", $tmpIO->read()) ];
            $entry = SW::DB::Entry->new( id         => $id,
                                         sequence   => $sequence,
                                         reactivity => $reactivity );
            $dbIO->write($entry);

        }
        $tmpIO->close();
        $dbIO->close();

        unlink($output . "tmp." . $file);

        { lock($progressBar);
          $progressBar->update(1); }

    }

}

sub help {

    print "\n  [!] Error: Invalid option. Please check the help\n" if ($_[0]);

    die <<HELP;

 SHAPEwarp Build Database (v1.0.0a)

 Authors: Edoardo Morandi (emorandi[at]rnaframework.com)
          Danny Incarnato (dincarnato[at]rnaframework.com)
 Summary: Builds SHAPEwarp databases from RNA Framework XML files

 Usage:   swBuildDb [Options] XML_folder_1/,XML_folder_2/,...,XML_folder_n/

 Options                                         Description
 -o  or --output               <string>          Output database folder (Default: sw_db/)
 -ow or --overwrite                              Overwrites output database folder if already existing
 --threads                     <int>             Number of processors to use (Default: 1)
 --blockSize                   <int>             Size (in nt) of the blocks for shuffling (Default: 10)
 --inBlockShuffle                                Besides shuffling blocks, residues within each block will be shuffled as well
 --chunkSize                   <int>             For each shuffling, only a chunk of this size will be extracted and used to
                                                 build the shuffled database (Default: 1000)
                                                 Note: this setting works fine for short queries (<1000 nt). If you plan to search
                                                       longer queries, then it is advisable to increase the value of chunkSize
 --shufflings                  <int>             Number of shufflings to perform for each database entry (Default: 100)
 --foldDb                                        Provided SHAPE profiles are first used to calculate base-pairing probability profiles,
                                                 that are then used to generate the database
                                                 Note: query searches must be performed with the '--foldQuery' option of SHAPEwarp

 |
 +- Probability profile database construction options

    --maxBPspan                   <int>             Maximum allowed base-pairing distance (Default: 600)
    --noLonelyPairs                                 Disallows lonely pairs (helices of 1 bp)
    --noClosingGU                                   Dissalows G:U wobbles at the end of helices
    --slope                       <float>           Slope for SHAPE reactivities conversion into pseudo-free energy contributions (Default: 1.8)
    --intercept                   <float>           Intercept for SHAPE reactivities conversion into pseudo-free energy contributions (Default: -0.6)
    --temperature                 <float>           Folding temperature (Default: 37.0)
    --winSize                     <int>             Size (in nt) of the sliding window for partition function calculation (Default: 800)
    --offset                      <int>             Offset (in nt) for partition function window sliding (Default: 200)
    --winTrim                     <int>             Number of bases to trim from both ends of partition function windows to avoid terminal
                                                    biases (Default: 50)

HELP

}
